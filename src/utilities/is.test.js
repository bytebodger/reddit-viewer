import is from './is';

const aDecimal = 42.42;
const aFalse = false;
const aGuid = 'QXQDPF137N2ODZ8ARILYUZ8F136QMHI4';
const anEmptyArray = [];
const anEmptyObject = {};
const anEmptyString = '';
const anInteger = 42;
const aNull = null;
const anUndefined = undefined;
const aPopulatedArray = ['populated'];
const aPopulatedObject = {lema : {had : {a : {little : 'lamb'}}}};
const aPopulatedString = 'aString';
const aTrue = true;
const aZero = 0;
test('is.aBoolean()', () => {
   expect(is.aBoolean(aDecimal)).toEqual(false);
   expect(is.aBoolean(aFalse)).toEqual(true);
   expect(is.aBoolean(aGuid)).toEqual(false);
   expect(is.aBoolean(anEmptyArray)).toEqual(false);
   expect(is.aBoolean(anEmptyObject)).toEqual(false);
   expect(is.aBoolean(anEmptyString)).toEqual(false);
   expect(is.aBoolean(anInteger)).toEqual(false);
   expect(is.aBoolean(aNull)).toEqual(false);
   expect(is.aBoolean(anUndefined)).toEqual(false);
   expect(is.aBoolean(aPopulatedArray)).toEqual(false);
   expect(is.aBoolean(aPopulatedObject)).toEqual(false);
   expect(is.aBoolean(aPopulatedString)).toEqual(false);
   expect(is.aBoolean(aTrue)).toEqual(true);
   expect(is.aBoolean(aZero)).toEqual(false);
});
test('is.anArray()', () => {
   expect(is.anArray(aDecimal)).toEqual(false);
   expect(is.anArray(aFalse)).toEqual(false);
   expect(is.anArray(aGuid)).toEqual(false);
   expect(is.anArray(anEmptyArray)).toEqual(true);
   expect(is.anArray(anEmptyObject)).toEqual(false);
   expect(is.anArray(anEmptyString)).toEqual(false);
   expect(is.anArray(anInteger)).toEqual(false);
   expect(is.anArray(aNull)).toEqual(false);
   expect(is.anArray(anUndefined)).toEqual(false);
   expect(is.anArray(aPopulatedArray)).toEqual(true);
   expect(is.anArray(aPopulatedObject)).toEqual(false);
   expect(is.anArray(aPopulatedString)).toEqual(false);
   expect(is.anArray(aTrue)).toEqual(false);
   expect(is.anArray(aZero)).toEqual(false);
});
test('is.anInteger()', () => {
   expect(is.anInteger(aDecimal)).toEqual(false);
   expect(is.anInteger(aFalse)).toEqual(false);
   expect(is.anInteger(aGuid)).toEqual(false);
   expect(is.anInteger(anEmptyArray)).toEqual(false);
   expect(is.anInteger(anEmptyObject)).toEqual(false);
   expect(is.anInteger(anEmptyString)).toEqual(false);
   expect(is.anInteger(anInteger)).toEqual(true);
   expect(is.anInteger(aNull)).toEqual(false);
   expect(is.anInteger(anUndefined)).toEqual(false);
   expect(is.anInteger(aPopulatedArray)).toEqual(false);
   expect(is.anInteger(aPopulatedObject)).toEqual(false);
   expect(is.anInteger(aPopulatedString)).toEqual(false);
   expect(is.anInteger(aTrue)).toEqual(false);
   expect(is.anInteger(aZero)).toEqual(true);
});
test('is.anObject()', () => {
   expect(is.anObject(aDecimal)).toEqual(false);
   expect(is.anObject(aFalse)).toEqual(false);
   expect(is.anObject(aGuid)).toEqual(false);
   expect(is.anObject(anEmptyArray)).toEqual(false);
   expect(is.anObject(anEmptyObject)).toEqual(true);
   expect(is.anObject(anEmptyString)).toEqual(false);
   expect(is.anObject(anInteger)).toEqual(false);
   expect(is.anObject(aNull)).toEqual(false);
   expect(is.anObject(anUndefined)).toEqual(false);
   expect(is.anObject(aPopulatedArray)).toEqual(false);
   expect(is.anObject(aPopulatedObject)).toEqual(true);
   expect(is.anObject(aPopulatedString)).toEqual(false);
   expect(is.anObject(aTrue)).toEqual(false);
   expect(is.anObject(aZero)).toEqual(false);
});
test('is.aNumber()', () => {
   expect(is.aNumber(aDecimal)).toEqual(true);
   expect(is.aNumber(aFalse)).toEqual(false);
   expect(is.aNumber(aGuid)).toEqual(false);
   expect(is.aNumber(anEmptyArray)).toEqual(false);
   expect(is.aNumber(anEmptyObject)).toEqual(false);
   expect(is.aNumber(anEmptyString)).toEqual(false);
   expect(is.aNumber(anInteger)).toEqual(true);
   expect(is.aNumber(aNull)).toEqual(false);
   expect(is.aNumber(anUndefined)).toEqual(false);
   expect(is.aNumber(aPopulatedArray)).toEqual(false);
   expect(is.aNumber(aPopulatedObject)).toEqual(false);
   expect(is.aNumber(aPopulatedString)).toEqual(false);
   expect(is.aNumber(aTrue)).toEqual(false);
   expect(is.aNumber(aZero)).toEqual(true);
});
test('is.aPopulatedArray()', () => {
   expect(is.aPopulatedArray(aDecimal)).toEqual(false);
   expect(is.aPopulatedArray(aFalse)).toEqual(false);
   expect(is.aPopulatedArray(aGuid)).toEqual(false);
   expect(is.aPopulatedArray(anEmptyArray)).toEqual(false);
   expect(is.aPopulatedArray(anEmptyObject)).toEqual(false);
   expect(is.aPopulatedArray(anEmptyString)).toEqual(false);
   expect(is.aPopulatedArray(anInteger)).toEqual(false);
   expect(is.aPopulatedArray(aNull)).toEqual(false);
   expect(is.aPopulatedArray(anUndefined)).toEqual(false);
   expect(is.aPopulatedArray(aPopulatedArray)).toEqual(true);
   expect(is.aPopulatedArray(aPopulatedObject)).toEqual(false);
   expect(is.aPopulatedArray(aPopulatedString)).toEqual(false);
   expect(is.aPopulatedArray(aTrue)).toEqual(false);
   expect(is.aPopulatedArray(aZero)).toEqual(false);
});
test('is.aPopulatedObject()', () => {
   expect(is.aPopulatedObject(aDecimal)).toEqual(false);
   expect(is.aPopulatedObject(aFalse)).toEqual(false);
   expect(is.aPopulatedObject(aGuid)).toEqual(false);
   expect(is.aPopulatedObject(anEmptyArray)).toEqual(false);
   expect(is.aPopulatedObject(anEmptyObject)).toEqual(false);
   expect(is.aPopulatedObject(anEmptyString)).toEqual(false);
   expect(is.aPopulatedObject(anInteger)).toEqual(false);
   expect(is.aPopulatedObject(aNull)).toEqual(false);
   expect(is.aPopulatedObject(anUndefined)).toEqual(false);
   expect(is.aPopulatedObject(aPopulatedArray)).toEqual(false);
   expect(is.aPopulatedObject(aPopulatedObject)).toEqual(true);
   expect(is.aPopulatedObject(aPopulatedString)).toEqual(false);
   expect(is.aPopulatedObject(aTrue)).toEqual(false);
   expect(is.aPopulatedObject(aZero)).toEqual(false);
});
test('is.aPopulatedString()', () => {
   expect(is.aPopulatedString(aDecimal)).toEqual(false);
   expect(is.aPopulatedString(aFalse)).toEqual(false);
   expect(is.aPopulatedString(aGuid)).toEqual(true);
   expect(is.aPopulatedString(anEmptyArray)).toEqual(false);
   expect(is.aPopulatedString(anEmptyObject)).toEqual(false);
   expect(is.aPopulatedString(anEmptyString)).toEqual(false);
   expect(is.aPopulatedString(anInteger)).toEqual(false);
   expect(is.aPopulatedString(aNull)).toEqual(false);
   expect(is.aPopulatedString(anUndefined)).toEqual(false);
   expect(is.aPopulatedString(aPopulatedArray)).toEqual(false);
   expect(is.aPopulatedString(aPopulatedObject)).toEqual(false);
   expect(is.aPopulatedString(aPopulatedString)).toEqual(true);
   expect(is.aPopulatedString(aTrue)).toEqual(false);
   expect(is.aPopulatedString(aZero)).toEqual(false);
});
test('is.aString()', () => {
   expect(is.aString(aDecimal)).toEqual(false);
   expect(is.aString(aFalse)).toEqual(false);
   expect(is.aString(aGuid)).toEqual(true);
   expect(is.aString(anEmptyArray)).toEqual(false);
   expect(is.aString(anEmptyObject)).toEqual(false);
   expect(is.aString(anEmptyString)).toEqual(true);
   expect(is.aString(anInteger)).toEqual(false);
   expect(is.aString(aNull)).toEqual(false);
   expect(is.aString(anUndefined)).toEqual(false);
   expect(is.aString(aPopulatedArray)).toEqual(false);
   expect(is.aString(aPopulatedObject)).toEqual(false);
   expect(is.aString(aPopulatedString)).toEqual(true);
   expect(is.aString(aTrue)).toEqual(false);
   expect(is.aString(aZero)).toEqual(false);
});
test('is.nullOrUndefined()', () => {
   expect(is.nullOrUndefined(aDecimal)).toEqual(false);
   expect(is.nullOrUndefined(aFalse)).toEqual(false);
   expect(is.nullOrUndefined(aGuid)).toEqual(false);
   expect(is.nullOrUndefined(anEmptyArray)).toEqual(false);
   expect(is.nullOrUndefined(anEmptyObject)).toEqual(false);
   expect(is.nullOrUndefined(anEmptyString)).toEqual(false);
   expect(is.nullOrUndefined(anInteger)).toEqual(false);
   expect(is.nullOrUndefined(aNull)).toEqual(true);
   expect(is.nullOrUndefined(anUndefined)).toEqual(true);
   expect(is.nullOrUndefined(aPopulatedArray)).toEqual(false);
   expect(is.nullOrUndefined(aPopulatedObject)).toEqual(false);
   expect(is.nullOrUndefined(aPopulatedString)).toEqual(false);
   expect(is.nullOrUndefined(aTrue)).toEqual(false);
   expect(is.nullOrUndefined(aZero)).toEqual(false);
});